<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_58872_needit/needit_api/nigetinfo/{user_name}</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>ni_getinfo</name>
        <operation_script><![CDATA[(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // Get value from the user_name path parameter passed in the URL
    var requestUser = request.pathParams.user_name;
    // Get value of the ni_query query parameter passed in the URL
    var requestNIQuery = request.queryParams.ni_query;

    // Query the sys_user table to get the user record for the user passed in
    // the user_id path parameter.  
    var requestUserName = new GlideRecord('sys_user');
    requestUserName.get('user_name', requestUser);



    // Get the count of active NeedIt table records where the user from the
    // user_name path parameter is the Requested for.  The encoded query is from the
    // Query Parameter Associations.  Group by category.
    var userNICount = new GlideAggregate('x_58872_needit_needit');
    userNICount.addAggregate('COUNT');
    userNICount.addQuery('u_requested_for', requestUserName.sys_id);
    userNICount.addEncodedQuery(requestNIQuery);
    userNICount.groupBy('u_request_type');
    userNICount.query();


    var needitRecs = 0;
    var niUserRecs = [];
    var needitRecsCount = 0;

    while (userNICount.next()) {
        needitRecs = userNICount.getAggregate('COUNT');
        var reqType = userNICount.u_request_type.getDisplayValue();
        niUserRecs.push({
            "requestType": reqType,
            "count": needitRecs
        });
        needitRecsCount = parseInt(needitRecsCount) + parseInt(needitRecs);
    }

    //Create a body object.  Add property value pairs to the body.
    var body = {};
    body.totalUserNIRecs = needitRecsCount;
    body.catCounts = niUserRecs;
    body.user = {
        "User name": requestUserName.user_name,
        "User ID": requestUserName.sys_id
    };

    // Send the response object, which is returned to the requestor, to the body object.
    response.setBody(body);

    /*
    // implement resource here
    //get instance of RESTAPIRequestBody
    var requestBody = request.body;
    //get pathParams object
    var pathparams = request.pathParams;
    //get user_id property value from pathparams object
    var userID = pathparams.user_id;
    //get queryParams object
    var queryparams = request.queryParams;
    //value of myQueryParam is active=true 
    var myQueryParam = queryparams.demo_query;
    //value of query is demo_query=active%3Dtrue 
    var query = request.queryString;
    //get the uri string
    //value of query is /api/<namespace>/demo_service/userinfo/5137153cc611227c000bbd1bd8cd2005d
    var query2 = request.uri;
    //get the url string
    //returns https://instance/api/<namespace>/demo_service/userinfo/5137153cc611227c000bbd1bd8cd2005d
    var query3 = request.url;

    //get the headers from the request
    var headers = request.headers;
    //get the value of the Accept property
    var acceptHeader = headers.accept;

    //get the headers from the request
    var headers2 = request.headers;
    //get the value of the from header
    var fromHeader = headers.getHeader('from');

    var contentTypes = [];
    contentTypes = request.getSupportedResponseContentTypes();
    for (i = 0; i < contentTypes.length; i++) {

        gs.info("content type [" + i + "] = " + contentTypes[i]);
    }*/

})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/v1/needit_api/nigetinfo/{user_name}</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/nigetinfo/{user_name}</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description>Find the NeedIt active NeedIt records for a user. Group by What needed.</short_description>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-08-05 14:04:32</sys_created_on>
        <sys_id>bf33040c2f621010685f2ea62799b6af</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>ni_getinfo</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_bf33040c2f621010685f2ea62799b6af</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-08-06 07:39:12</sys_updated_on>
        <web_service_definition display_value="NeedIt API">09cdfbf72f521010685f2ea62799b6f6</web_service_definition>
        <web_service_version display_value="v1">4485f7842faa1010685f2ea62799b6b6</web_service_version>
    </sys_ws_operation>
</record_update>
